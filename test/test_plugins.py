#
# $Id$
#
"""
Test the ability to use dynamic plugins
"""
from twisted.trial import unittest, runner, reporter
from twisted.internet import reactor
from twisted.python.util import sibpath

from ConfigParser import RawConfigParser
from StringIO import StringIO

from docgen.util import load_doc_plugins
from docgen.docplugins.ipsan_storage import IPSANStorageDesignGenerator
from docgen.docplugins.commands import IPSANCommandsGenerator

from docgen import debug
import logging
log = logging.getLogger('docgen')
log.setLevel(logging.DEBUG)

config_file_data = """
[global]
# The copyright holder for all documents generated by DocGen
copyright_holder: Justin Warren

[document_plugins]
# DocumentGenerator modules to load, and the name that will be
# used to reference them.
ipsan-storage-design: docgen.docplugins.ipsan_storage.IPSANStorageDesignGenerator
#ipsan-network-design: docgen.docplugins.ipsan_network.IPSANNetworkDesignGenerator
ipsan-storage-modipy: docgen.docplugins.modipy.NetAppModiPyGenerator
ipsan-storage-commands: docgen.docplugins.netapp_commands.NetAppCommandsGenerator
vol-sizes: docgen.docplugins.netapp_commands.VolumeSizeCommandsGenerator
#ipsan-activation-advice: docgen.activation_advice.IPSANActivationAdvice
"""

class PluginsTest(unittest.TestCase):
    """
    Test some basic DocumentGenerator plugin functions
    """

    def test_load_plugins(self):
        #raise unittest.SkipTest("Plugins temporarily disabled during refactor")
        defaults = RawConfigParser()
        defaults.readfp(StringIO(config_file_data))
        plugins = load_doc_plugins(defaults)

        self.failUnlessEqual(len(plugins), 4)
        self.failUnless( 'vol-sizes' in plugins )
        self.failUnless( 'ipsan-storage-design' in plugins )
